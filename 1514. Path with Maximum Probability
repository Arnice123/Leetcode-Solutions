class Solution {
public:
    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int start_node, int end_node) {
        vector<vector<pair<int, double>>> graph(n);
        for (int i = 0; i < edges.size(); ++i)
        {
            int u = edges[i][0], v = edges[i][1];
            double w = succProb[i];
            graph[u].push_back({v, w});
            graph[v].push_back({u, w});
        }

        vector<double> prob(n, 0.0);
        prob[start_node] = 1.0;

        priority_queue<pair<double, int>> pq;
        pq.push({1.0, start_node});

        while (!pq.empty())
        {
            double currProb = pq.top().first;
            int currNode = pq.top().second;
            pq.pop();

            if (currNode == end_node) return currProb;

            if (currProb < prob[currNode]) continue;

            for (auto& [neighbor, weight] : graph[currNode])
            {
                double newProb = currProb * weight;

                if (newProb > prob[neighbor])
                {
                    prob[neighbor] = newProb;
                    pq.push({newProb, neighbor});
                }
            }
        }

        return 0.0;
    }
};
