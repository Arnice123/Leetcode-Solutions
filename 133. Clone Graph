using namespace std;
/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

class Solution {
public:
    Node* cloneGraph(Node* node) {
        if (!node) return nullptr;

        vector<Node*> clone(101, nullptr);

        queue<Node*> q;
        q.push(node);

        clone[node->val] = new Node(node->val);

        while (!q.empty())
        {
            Node* current = q.front();
            q.pop();

            for (Node* neighbor: current->neighbors){
                if (clone[neighbor->val] == nullptr)
                {
                    clone[neighbor->val] = new Node(neighbor->val);
                    q.push(neighbor);
                }

                clone[current->val]->neighbors.push_back(clone[neighbor->val]);
            }
        }
        return clone[node->val];
    }
};
