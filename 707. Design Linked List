class MyLinkedList {
public:
    MyLinkedList() {
        head = nullptr;
        tail = nullptr;
        size = 0;
    }
    
    int get(int index) {
        if (index < 0 || index >= size) return -1;

        Node* current;
        if (index <= size/2)
        {
            current = head;
            for (int i = 0; i < index; i++)
            {
                current = current->next;
            }
        }
        else
        {
            current = tail;
            for (int i = size - 1; i > index; i--)
            {
                current = current->prev;
            }
        }

        return current->val;
    }
    
    void addAtHead(int val) {
        Node* newNode = new Node(val);
        if (head == nullptr)
        {
            head = newNode;
            tail = newNode;
        }
        else
        {
            newNode->next = head;
            head->prev = newNode;
            head = newNode;
        }
        
        ++size;
    }
    
    void addAtTail(int val) {
        Node* newNode = new Node(val);
        if (tail == nullptr)
        {
            head = newNode;
            tail = newNode;
        }
        else
        {
            newNode->prev = tail;
            tail->next = newNode;
            tail = newNode;
        }
        
        ++size;
    }
    
    void addAtIndex(int index, int val) {
        if (index < 0 || index > size) return;

        if (index == 0) {
            addAtHead(val);
            return;
        }
        if (index == size) {
            addAtTail(val);
            return;
        }

        Node* current;
        if (index <= size/2)
        {
            current = head;
            for (int i = 0; i < index; i++)
            {
                current = current->next;
            }
        }
        else
        {
            current = tail;
            for (int i = size - 1; i > index; i--)
            {
                current = current->prev;
            }
        }

        Node* newNode = new Node(val);
        newNode->prev = current->prev;
        newNode->next = current;
        current->prev->next = newNode;
        current->prev = newNode;
        ++size;
    }
    
    void deleteAtIndex(int index) {
        if (index < 0 || index >= size) return;

        Node* current;

        if (index == 0)
        {
            current = head;
            head = head->next;

            if (head) {
                head->prev = nullptr;
            } else {
                tail = nullptr;
            }

            delete current;
            --size;
            return;
        }

        if (index == size - 1)
        {
            current = tail;
            tail = tail->prev;
            tail->next = nullptr;

            delete current;
            --size;
            return;
        }

        current = head;
        for (int i = 0; i < index; i++)
        {
            current = current->next;
        }

        Node* prev = current->prev;
        Node* next = current->next;

        prev->next = next;
        next->prev = prev;
        delete current;
        --size;
    }

    ~MyLinkedList() {
        while (head) {
            Node* temp = head;
            head = head->next;
            delete temp;
        }
    }

private:
    struct Node {
        int val;
        Node* prev;
        Node* next;
        Node(int x) : val(x), prev(nullptr), next(nullptr) {}
    };
    
    Node* head;
    Node* tail;
    int size;
};
